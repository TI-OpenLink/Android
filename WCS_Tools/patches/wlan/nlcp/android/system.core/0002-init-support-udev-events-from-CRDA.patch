From 9604aca432bc6e9fbf8378b97d999d07ced11551 Mon Sep 17 00:00:00 2001
From: Arik Nemtsov <arik@wizery.com>
Date: Wed, 16 Mar 2011 06:32:36 -0500
Subject: [PATCH 2/2] init: support udev events from CRDA

correctly parse the COUNTRY env variable and pass it to the crda daemon
when a CRDA related messages is received

Change-Id: I894f47bb909405838f922ba7048428fe3b24946a
---
 init/devices.c |   40 ++++++++++++++++++++++++++++++++++++++--
 1 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/init/devices.c b/init/devices.c
index e73efdf..36eaa85 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -50,6 +50,7 @@ struct uevent {
     const char *subsystem;
     const char *firmware;
     const char *partition_name;
+    const char *country;
     int partition_num;
     int major;
     int minor;
@@ -235,6 +236,7 @@ static void parse_event(const char *msg, struct uevent *uevent)
     uevent->path = "";
     uevent->subsystem = "";
     uevent->firmware = "";
+    uevent->country = "";
     uevent->major = -1;
     uevent->minor = -1;
     uevent->partition_name = NULL;
@@ -266,6 +268,9 @@ static void parse_event(const char *msg, struct uevent *uevent)
         } else if(!strncmp(msg, "PARTNAME=", 9)) {
             msg += 9;
             uevent->partition_name = msg;
+        } else if (!strncmp(msg, "COUNTRY=", 8)) {
+            msg += 8;
+            uevent->country = msg;
         }
 
             /* advance to after the next \0 */
@@ -273,9 +278,10 @@ static void parse_event(const char *msg, struct uevent *uevent)
             ;
     }
 
-    log_event_print("event { '%s', '%s', '%s', '%s', %d, %d }\n",
+    log_event_print("event { '%s', '%s', '%s', '%s', %d, %d, '%s' }\n",
                     uevent->action, uevent->path, uevent->subsystem,
-                    uevent->firmware, uevent->major, uevent->minor);
+                    uevent->firmware, uevent->major, uevent->minor,
+                    uevent->country);
 }
 
 static char **parse_platform_block_device(struct uevent *uevent)
@@ -562,6 +568,35 @@ root_free_out:
     free(root);
 }
 
+static void handle_crda_event(struct uevent *uevent)
+{
+    int status;
+    int ret;
+    pid_t pid;
+    char country_env[128];
+    char *argv[] = { "/system/bin/crda", NULL };
+    char *envp[] = { country_env, NULL };
+
+    if(strcmp(uevent->subsystem, "platform"))
+        return;
+
+    if(strcmp(uevent->action, "change"))
+        return;
+
+    log_event_print("executing CRDA country=%s\n", uevent->country);
+    sprintf(country_env, "COUNTRY=%s", uevent->country);
+
+    pid = fork();
+    if (!pid) {
+        if (-1 == execve(argv[0], argv, envp))
+            exit(1);
+    } else if (pid != -1) {
+        do {
+            ret = waitpid(pid, &status, 0);
+        } while (ret == -1 && errno == EINTR);
+    }
+}
+
 static void handle_firmware_event(struct uevent *uevent)
 {
     pid_t pid;
@@ -629,6 +664,7 @@ void handle_device_fd()
 
         handle_device_event(&uevent);
         handle_firmware_event(&uevent);
+        handle_crda_event(&uevent);
     }
 }
 
-- 
1.7.1

